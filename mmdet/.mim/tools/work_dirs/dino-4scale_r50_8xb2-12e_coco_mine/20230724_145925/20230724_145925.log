2023/07/24 14:59:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.10.12 | packaged by Anaconda, Inc. | (main, Jul  5 2023, 19:01:18) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 494093945
    GPU 0: NVIDIA GeForce RTX 4090
    CUDA_HOME: None
    GCC: n/a
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 494093945
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/07/24 14:59:26 - mmengine - INFO - Config:
dataset_type = 'CocoDataset'
data_root = 'D:\\Projects\\data\\coco/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='RandomFlip', prob=0.5),
    dict(
        type='RandomChoice',
        transforms=[
            [
                dict(
                    type='RandomChoiceResize',
                    scales=[
                        (
                            192,
                            320,
                        ),
                        (
                            205,
                            320,
                        ),
                        (
                            218,
                            320,
                        ),
                        (
                            230,
                            320,
                        ),
                        (
                            243,
                            320,
                        ),
                        (
                            256,
                            320,
                        ),
                        (
                            269,
                            320,
                        ),
                        (
                            282,
                            320,
                        ),
                        (
                            294,
                            320,
                        ),
                        (
                            307,
                            320,
                        ),
                        (
                            320,
                            320,
                        ),
                    ],
                    keep_ratio=True),
            ],
            [
                dict(
                    type='RandomChoiceResize',
                    scales=[
                        (
                            160,
                            1008,
                        ),
                        (
                            200,
                            1008,
                        ),
                        (
                            240,
                            1008,
                        ),
                    ],
                    keep_ratio=True),
                dict(
                    type='RandomCrop',
                    crop_type='absolute_range',
                    crop_size=(
                        150,
                        200,
                    ),
                    allow_negative_crop=True),
                dict(
                    type='RandomChoiceResize',
                    scales=[
                        (
                            192,
                            320,
                        ),
                        (
                            205,
                            320,
                        ),
                        (
                            218,
                            320,
                        ),
                        (
                            230,
                            320,
                        ),
                        (
                            243,
                            320,
                        ),
                        (
                            256,
                            320,
                        ),
                        (
                            269,
                            320,
                        ),
                        (
                            282,
                            320,
                        ),
                        (
                            294,
                            320,
                        ),
                        (
                            307,
                            320,
                        ),
                        (
                            320,
                            320,
                        ),
                    ],
                    keep_ratio=True),
            ],
        ]),
    dict(type='PackDetInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(
        320,
        320,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        )),
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='D:\\Projects\\data\\coco/',
        ann_file='annotations/instances_train2017.json',
        data_prefix=dict(img='train2017/'),
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='RandomChoice',
                transforms=[
                    [
                        dict(
                            type='RandomChoiceResize',
                            scales=[
                                (
                                    192,
                                    320,
                                ),
                                (
                                    205,
                                    320,
                                ),
                                (
                                    218,
                                    320,
                                ),
                                (
                                    230,
                                    320,
                                ),
                                (
                                    243,
                                    320,
                                ),
                                (
                                    256,
                                    320,
                                ),
                                (
                                    269,
                                    320,
                                ),
                                (
                                    282,
                                    320,
                                ),
                                (
                                    294,
                                    320,
                                ),
                                (
                                    307,
                                    320,
                                ),
                                (
                                    320,
                                    320,
                                ),
                            ],
                            keep_ratio=True),
                    ],
                    [
                        dict(
                            type='RandomChoiceResize',
                            scales=[
                                (
                                    160,
                                    1008,
                                ),
                                (
                                    200,
                                    1008,
                                ),
                                (
                                    240,
                                    1008,
                                ),
                            ],
                            keep_ratio=True),
                        dict(
                            type='RandomCrop',
                            crop_type='absolute_range',
                            crop_size=(
                                150,
                                200,
                            ),
                            allow_negative_crop=True),
                        dict(
                            type='RandomChoiceResize',
                            scales=[
                                (
                                    192,
                                    320,
                                ),
                                (
                                    205,
                                    320,
                                ),
                                (
                                    218,
                                    320,
                                ),
                                (
                                    230,
                                    320,
                                ),
                                (
                                    243,
                                    320,
                                ),
                                (
                                    256,
                                    320,
                                ),
                                (
                                    269,
                                    320,
                                ),
                                (
                                    282,
                                    320,
                                ),
                                (
                                    294,
                                    320,
                                ),
                                (
                                    307,
                                    320,
                                ),
                                (
                                    320,
                                    320,
                                ),
                            ],
                            keep_ratio=True),
                    ],
                ]),
            dict(type='PackDetInputs'),
        ],
        backend_args=None))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='D:\\Projects\\data\\coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(
                320,
                320,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                )),
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='D:\\Projects\\data\\coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(
                320,
                320,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                )),
        ],
        backend_args=None))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='D:\\Projects\\data\\coco/annotations/instances_val2017.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='D:\\Projects\\data\\coco/annotations/instances_val2017.json',
    metric='bbox',
    format_only=False,
    backend_args=None)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'E:\\D2E\\Projects\\DINO_mmdet3\\checkpoint\\dino\\r50_coco\\01\\epoch_1.pth'
resume = False
model = dict(
    type='DINO',
    num_queries=85,
    with_box_refine=True,
    as_two_stage=True,
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        bgr_to_rgb=True,
        pad_size_divisor=1),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(
            1,
            2,
            3,
        ),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='ChannelMapper',
        in_channels=[
            512,
            1024,
            2048,
        ],
        kernel_size=1,
        out_channels=256,
        act_cfg=None,
        norm_cfg=dict(type='GN', num_groups=32),
        num_outs=4),
    encoder=dict(
        num_layers=6,
        layer_cfg=dict(
            self_attn_cfg=dict(embed_dims=256, num_levels=4, dropout=0.0),
            ffn_cfg=dict(
                embed_dims=256, feedforward_channels=2048, ffn_drop=0.0))),
    decoder=dict(
        num_layers=6,
        return_intermediate=True,
        layer_cfg=dict(
            self_attn_cfg=dict(embed_dims=256, num_heads=8, dropout=0.0),
            cross_attn_cfg=dict(embed_dims=256, num_levels=4, dropout=0.0),
            ffn_cfg=dict(
                embed_dims=256, feedforward_channels=2048, ffn_drop=0.0)),
        post_norm_cfg=None),
    positional_encoding=dict(
        num_feats=128, normalize=True, offset=0.0, temperature=20),
    bbox_head=dict(
        type='DINOHead',
        num_classes=80,
        sync_cls_avg_factor=True,
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=5.0),
        loss_iou=dict(type='GIoULoss', loss_weight=2.0)),
    dn_cfg=dict(
        label_noise_scale=0.5,
        box_noise_scale=1.0,
        group_cfg=dict(dynamic=True, num_groups=None, num_dn_queries=100)),
    train_cfg=dict(
        assigner=dict(
            type='HungarianAssigner',
            match_costs=[
                dict(type='FocalLossCost', weight=2.0),
                dict(type='BBoxL1Cost', weight=5.0, box_format='xywh'),
                dict(type='IoUCost', iou_mode='giou', weight=2.0),
            ])),
    test_cfg=dict(max_per_img=300))
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.0001, weight_decay=0.0001),
    clip_grad=dict(max_norm=0.1, norm_type=2),
    paramwise_cfg=dict(custom_keys=dict(backbone=dict(lr_mult=0.1))))
max_epochs = 12
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[
            11,
        ],
        gamma=0.1),
]
auto_scale_lr = dict(base_batch_size=16)
launcher = 'none'
work_dir = './work_dirs\\dino-4scale_r50_8xb2-12e_coco_mine'

2023/07/24 14:59:28 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/07/24 14:59:28 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/07/24 14:59:30 - mmengine - INFO - Load checkpoint from E:\D2E\Projects\DINO_mmdet3\checkpoint\dino\r50_coco\01\epoch_1.pth
2023/07/24 14:59:37 - mmengine - INFO - Epoch(test) [  50/5000]    eta: 0:11:36  time: 0.1407  data_time: 0.0644  memory: 327  
2023/07/24 14:59:39 - mmengine - INFO - Epoch(test) [ 100/5000]    eta: 0:07:05  time: 0.0331  data_time: 0.0003  memory: 323  
2023/07/24 14:59:41 - mmengine - INFO - Epoch(test) [ 150/5000]    eta: 0:05:36  time: 0.0341  data_time: 0.0004  memory: 327  
2023/07/24 14:59:43 - mmengine - INFO - Epoch(test) [ 200/5000]    eta: 0:04:50  time: 0.0340  data_time: 0.0005  memory: 327  
2023/07/24 14:59:44 - mmengine - INFO - Epoch(test) [ 250/5000]    eta: 0:04:21  time: 0.0338  data_time: 0.0004  memory: 327  
2023/07/24 14:59:46 - mmengine - INFO - Epoch(test) [ 300/5000]    eta: 0:04:02  time: 0.0344  data_time: 0.0003  memory: 327  
2023/07/24 14:59:48 - mmengine - INFO - Epoch(test) [ 350/5000]    eta: 0:03:48  time: 0.0333  data_time: 0.0003  memory: 327  
2023/07/24 14:59:49 - mmengine - INFO - Epoch(test) [ 400/5000]    eta: 0:03:37  time: 0.0341  data_time: 0.0004  memory: 327  
2023/07/24 14:59:51 - mmengine - INFO - Epoch(test) [ 450/5000]    eta: 0:03:27  time: 0.0337  data_time: 0.0003  memory: 327  
2023/07/24 14:59:53 - mmengine - INFO - Epoch(test) [ 500/5000]    eta: 0:03:20  time: 0.0338  data_time: 0.0003  memory: 327  
2023/07/24 14:59:54 - mmengine - INFO - Epoch(test) [ 550/5000]    eta: 0:03:14  time: 0.0347  data_time: 0.0005  memory: 325  
2023/07/24 14:59:56 - mmengine - INFO - Epoch(test) [ 600/5000]    eta: 0:03:08  time: 0.0351  data_time: 0.0005  memory: 327  
2023/07/24 14:59:58 - mmengine - INFO - Epoch(test) [ 650/5000]    eta: 0:03:03  time: 0.0341  data_time: 0.0005  memory: 327  
2023/07/24 15:00:00 - mmengine - INFO - Epoch(test) [ 700/5000]    eta: 0:02:58  time: 0.0336  data_time: 0.0004  memory: 323  
2023/07/24 15:00:01 - mmengine - INFO - Epoch(test) [ 750/5000]    eta: 0:02:55  time: 0.0355  data_time: 0.0003  memory: 327  
2023/07/24 15:00:03 - mmengine - INFO - Epoch(test) [ 800/5000]    eta: 0:02:51  time: 0.0341  data_time: 0.0005  memory: 327  
2023/07/24 15:00:05 - mmengine - INFO - Epoch(test) [ 850/5000]    eta: 0:02:47  time: 0.0331  data_time: 0.0005  memory: 327  
2023/07/24 15:00:06 - mmengine - INFO - Epoch(test) [ 900/5000]    eta: 0:02:43  time: 0.0346  data_time: 0.0004  memory: 327  
2023/07/24 15:00:08 - mmengine - INFO - Epoch(test) [ 950/5000]    eta: 0:02:40  time: 0.0350  data_time: 0.0003  memory: 327  
2023/07/24 15:00:10 - mmengine - INFO - Epoch(test) [1000/5000]    eta: 0:02:37  time: 0.0346  data_time: 0.0005  memory: 327  
2023/07/24 15:00:12 - mmengine - INFO - Epoch(test) [1050/5000]    eta: 0:02:34  time: 0.0334  data_time: 0.0005  memory: 327  
2023/07/24 15:00:13 - mmengine - INFO - Epoch(test) [1100/5000]    eta: 0:02:31  time: 0.0322  data_time: 0.0002  memory: 327  
2023/07/24 15:00:15 - mmengine - INFO - Epoch(test) [1150/5000]    eta: 0:02:28  time: 0.0348  data_time: 0.0004  memory: 327  
2023/07/24 15:00:17 - mmengine - INFO - Epoch(test) [1200/5000]    eta: 0:02:26  time: 0.0331  data_time: 0.0004  memory: 327  
2023/07/24 15:00:18 - mmengine - INFO - Epoch(test) [1250/5000]    eta: 0:02:23  time: 0.0337  data_time: 0.0005  memory: 327  
2023/07/24 15:00:20 - mmengine - INFO - Epoch(test) [1300/5000]    eta: 0:02:20  time: 0.0339  data_time: 0.0004  memory: 327  
2023/07/24 15:00:22 - mmengine - INFO - Epoch(test) [1350/5000]    eta: 0:02:18  time: 0.0347  data_time: 0.0004  memory: 327  
2023/07/24 15:00:23 - mmengine - INFO - Epoch(test) [1400/5000]    eta: 0:02:16  time: 0.0342  data_time: 0.0003  memory: 327  
2023/07/24 15:00:25 - mmengine - INFO - Epoch(test) [1450/5000]    eta: 0:02:13  time: 0.0333  data_time: 0.0003  memory: 327  
2023/07/24 15:00:27 - mmengine - INFO - Epoch(test) [1500/5000]    eta: 0:02:11  time: 0.0336  data_time: 0.0004  memory: 327  
2023/07/24 15:00:28 - mmengine - INFO - Epoch(test) [1550/5000]    eta: 0:02:09  time: 0.0336  data_time: 0.0004  memory: 323  
2023/07/24 15:00:30 - mmengine - INFO - Epoch(test) [1600/5000]    eta: 0:02:06  time: 0.0335  data_time: 0.0004  memory: 327  
2023/07/24 15:00:32 - mmengine - INFO - Epoch(test) [1650/5000]    eta: 0:02:04  time: 0.0335  data_time: 0.0004  memory: 327  
2023/07/24 15:00:34 - mmengine - INFO - Epoch(test) [1700/5000]    eta: 0:02:02  time: 0.0347  data_time: 0.0005  memory: 327  
2023/07/24 15:00:35 - mmengine - INFO - Epoch(test) [1750/5000]    eta: 0:02:00  time: 0.0338  data_time: 0.0003  memory: 327  
2023/07/24 15:00:37 - mmengine - INFO - Epoch(test) [1800/5000]    eta: 0:01:58  time: 0.0335  data_time: 0.0004  memory: 327  
2023/07/24 15:00:39 - mmengine - INFO - Epoch(test) [1850/5000]    eta: 0:01:56  time: 0.0342  data_time: 0.0003  memory: 327  
2023/07/24 15:00:40 - mmengine - INFO - Epoch(test) [1900/5000]    eta: 0:01:53  time: 0.0339  data_time: 0.0002  memory: 327  
2023/07/24 15:00:42 - mmengine - INFO - Epoch(test) [1950/5000]    eta: 0:01:51  time: 0.0334  data_time: 0.0003  memory: 327  
2023/07/24 15:00:44 - mmengine - INFO - Epoch(test) [2000/5000]    eta: 0:01:49  time: 0.0332  data_time: 0.0005  memory: 323  
2023/07/24 15:00:45 - mmengine - INFO - Epoch(test) [2050/5000]    eta: 0:01:47  time: 0.0344  data_time: 0.0004  memory: 327  
2023/07/24 15:00:47 - mmengine - INFO - Epoch(test) [2100/5000]    eta: 0:01:45  time: 0.0343  data_time: 0.0005  memory: 327  
2023/07/24 15:00:49 - mmengine - INFO - Epoch(test) [2150/5000]    eta: 0:01:43  time: 0.0334  data_time: 0.0003  memory: 327  
2023/07/24 15:00:50 - mmengine - INFO - Epoch(test) [2200/5000]    eta: 0:01:41  time: 0.0334  data_time: 0.0003  memory: 327  
2023/07/24 15:00:52 - mmengine - INFO - Epoch(test) [2250/5000]    eta: 0:01:39  time: 0.0336  data_time: 0.0004  memory: 324  
2023/07/24 15:00:54 - mmengine - INFO - Epoch(test) [2300/5000]    eta: 0:01:37  time: 0.0342  data_time: 0.0003  memory: 327  
2023/07/24 15:00:56 - mmengine - INFO - Epoch(test) [2350/5000]    eta: 0:01:36  time: 0.0368  data_time: 0.0005  memory: 327  
2023/07/24 15:00:57 - mmengine - INFO - Epoch(test) [2400/5000]    eta: 0:01:34  time: 0.0334  data_time: 0.0004  memory: 327  
2023/07/24 15:00:59 - mmengine - INFO - Epoch(test) [2450/5000]    eta: 0:01:32  time: 0.0337  data_time: 0.0004  memory: 327  
2023/07/24 15:01:01 - mmengine - INFO - Epoch(test) [2500/5000]    eta: 0:01:30  time: 0.0360  data_time: 0.0004  memory: 327  
2023/07/24 15:01:03 - mmengine - INFO - Epoch(test) [2550/5000]    eta: 0:01:28  time: 0.0337  data_time: 0.0004  memory: 327  
2023/07/24 15:01:04 - mmengine - INFO - Epoch(test) [2600/5000]    eta: 0:01:26  time: 0.0334  data_time: 0.0004  memory: 327  
2023/07/24 15:01:06 - mmengine - INFO - Epoch(test) [2650/5000]    eta: 0:01:24  time: 0.0343  data_time: 0.0003  memory: 327  
2023/07/24 15:01:08 - mmengine - INFO - Epoch(test) [2700/5000]    eta: 0:01:22  time: 0.0345  data_time: 0.0004  memory: 327  
2023/07/24 15:01:09 - mmengine - INFO - Epoch(test) [2750/5000]    eta: 0:01:20  time: 0.0343  data_time: 0.0003  memory: 327  
2023/07/24 15:01:11 - mmengine - INFO - Epoch(test) [2800/5000]    eta: 0:01:18  time: 0.0338  data_time: 0.0005  memory: 327  
2023/07/24 15:01:13 - mmengine - INFO - Epoch(test) [2850/5000]    eta: 0:01:17  time: 0.0335  data_time: 0.0004  memory: 327  
2023/07/24 15:01:14 - mmengine - INFO - Epoch(test) [2900/5000]    eta: 0:01:15  time: 0.0341  data_time: 0.0005  memory: 327  
2023/07/24 15:01:16 - mmengine - INFO - Epoch(test) [2950/5000]    eta: 0:01:13  time: 0.0347  data_time: 0.0005  memory: 327  
2023/07/24 15:01:18 - mmengine - INFO - Epoch(test) [3000/5000]    eta: 0:01:11  time: 0.0340  data_time: 0.0004  memory: 327  
2023/07/24 15:01:20 - mmengine - INFO - Epoch(test) [3050/5000]    eta: 0:01:09  time: 0.0339  data_time: 0.0004  memory: 327  
2023/07/24 15:01:21 - mmengine - INFO - Epoch(test) [3100/5000]    eta: 0:01:07  time: 0.0351  data_time: 0.0004  memory: 324  
2023/07/24 15:01:23 - mmengine - INFO - Epoch(test) [3150/5000]    eta: 0:01:06  time: 0.0340  data_time: 0.0004  memory: 327  
2023/07/24 15:01:25 - mmengine - INFO - Epoch(test) [3200/5000]    eta: 0:01:04  time: 0.0341  data_time: 0.0004  memory: 327  
2023/07/24 15:01:26 - mmengine - INFO - Epoch(test) [3250/5000]    eta: 0:01:02  time: 0.0341  data_time: 0.0004  memory: 326  
2023/07/24 15:01:28 - mmengine - INFO - Epoch(test) [3300/5000]    eta: 0:01:00  time: 0.0354  data_time: 0.0005  memory: 327  
2023/07/24 15:01:30 - mmengine - INFO - Epoch(test) [3350/5000]    eta: 0:00:58  time: 0.0345  data_time: 0.0004  memory: 327  
2023/07/24 15:01:32 - mmengine - INFO - Epoch(test) [3400/5000]    eta: 0:00:56  time: 0.0330  data_time: 0.0004  memory: 327  
2023/07/24 15:01:33 - mmengine - INFO - Epoch(test) [3450/5000]    eta: 0:00:55  time: 0.0349  data_time: 0.0004  memory: 327  
2023/07/24 15:01:35 - mmengine - INFO - Epoch(test) [3500/5000]    eta: 0:00:53  time: 0.0345  data_time: 0.0004  memory: 327  
2023/07/24 15:01:37 - mmengine - INFO - Epoch(test) [3550/5000]    eta: 0:00:51  time: 0.0344  data_time: 0.0005  memory: 327  
2023/07/24 15:01:38 - mmengine - INFO - Epoch(test) [3600/5000]    eta: 0:00:49  time: 0.0347  data_time: 0.0003  memory: 324  
2023/07/24 15:01:40 - mmengine - INFO - Epoch(test) [3650/5000]    eta: 0:00:47  time: 0.0337  data_time: 0.0003  memory: 326  
2023/07/24 15:01:42 - mmengine - INFO - Epoch(test) [3700/5000]    eta: 0:00:46  time: 0.0345  data_time: 0.0005  memory: 327  
2023/07/24 15:01:44 - mmengine - INFO - Epoch(test) [3750/5000]    eta: 0:00:44  time: 0.0339  data_time: 0.0004  memory: 327  
2023/07/24 15:01:45 - mmengine - INFO - Epoch(test) [3800/5000]    eta: 0:00:42  time: 0.0348  data_time: 0.0003  memory: 327  
2023/07/24 15:01:47 - mmengine - INFO - Epoch(test) [3850/5000]    eta: 0:00:40  time: 0.0347  data_time: 0.0003  memory: 327  
2023/07/24 15:01:49 - mmengine - INFO - Epoch(test) [3900/5000]    eta: 0:00:38  time: 0.0334  data_time: 0.0003  memory: 327  
2023/07/24 15:01:50 - mmengine - INFO - Epoch(test) [3950/5000]    eta: 0:00:37  time: 0.0342  data_time: 0.0005  memory: 327  
2023/07/24 15:01:52 - mmengine - INFO - Epoch(test) [4000/5000]    eta: 0:00:35  time: 0.0340  data_time: 0.0004  memory: 326  
2023/07/24 15:01:54 - mmengine - INFO - Epoch(test) [4050/5000]    eta: 0:00:33  time: 0.0341  data_time: 0.0003  memory: 327  
2023/07/24 15:01:56 - mmengine - INFO - Epoch(test) [4100/5000]    eta: 0:00:31  time: 0.0355  data_time: 0.0004  memory: 327  
2023/07/24 15:01:57 - mmengine - INFO - Epoch(test) [4150/5000]    eta: 0:00:30  time: 0.0355  data_time: 0.0004  memory: 327  
2023/07/24 15:01:59 - mmengine - INFO - Epoch(test) [4200/5000]    eta: 0:00:28  time: 0.0348  data_time: 0.0004  memory: 324  
2023/07/24 15:02:01 - mmengine - INFO - Epoch(test) [4250/5000]    eta: 0:00:26  time: 0.0360  data_time: 0.0004  memory: 327  
2023/07/24 15:02:03 - mmengine - INFO - Epoch(test) [4300/5000]    eta: 0:00:24  time: 0.0333  data_time: 0.0003  memory: 324  
2023/07/24 15:02:04 - mmengine - INFO - Epoch(test) [4350/5000]    eta: 0:00:22  time: 0.0343  data_time: 0.0004  memory: 326  
2023/07/24 15:02:06 - mmengine - INFO - Epoch(test) [4400/5000]    eta: 0:00:21  time: 0.0341  data_time: 0.0003  memory: 327  
2023/07/24 15:02:08 - mmengine - INFO - Epoch(test) [4450/5000]    eta: 0:00:19  time: 0.0336  data_time: 0.0004  memory: 327  
2023/07/24 15:02:09 - mmengine - INFO - Epoch(test) [4500/5000]    eta: 0:00:17  time: 0.0344  data_time: 0.0003  memory: 327  
2023/07/24 15:02:11 - mmengine - INFO - Epoch(test) [4550/5000]    eta: 0:00:15  time: 0.0356  data_time: 0.0005  memory: 327  
2023/07/24 15:02:13 - mmengine - INFO - Epoch(test) [4600/5000]    eta: 0:00:14  time: 0.0347  data_time: 0.0002  memory: 327  
2023/07/24 15:02:15 - mmengine - INFO - Epoch(test) [4650/5000]    eta: 0:00:12  time: 0.0340  data_time: 0.0004  memory: 327  
2023/07/24 15:02:16 - mmengine - INFO - Epoch(test) [4700/5000]    eta: 0:00:10  time: 0.0343  data_time: 0.0005  memory: 327  
2023/07/24 15:02:18 - mmengine - INFO - Epoch(test) [4750/5000]    eta: 0:00:08  time: 0.0340  data_time: 0.0004  memory: 327  
2023/07/24 15:02:20 - mmengine - INFO - Epoch(test) [4800/5000]    eta: 0:00:07  time: 0.0338  data_time: 0.0004  memory: 327  
2023/07/24 15:02:22 - mmengine - INFO - Epoch(test) [4850/5000]    eta: 0:00:05  time: 0.0350  data_time: 0.0003  memory: 327  
2023/07/24 15:02:23 - mmengine - INFO - Epoch(test) [4900/5000]    eta: 0:00:03  time: 0.0340  data_time: 0.0004  memory: 327  
2023/07/24 15:02:25 - mmengine - INFO - Epoch(test) [4950/5000]    eta: 0:00:01  time: 0.0346  data_time: 0.0003  memory: 327  
2023/07/24 15:02:27 - mmengine - INFO - Epoch(test) [5000/5000]    eta: 0:00:00  time: 0.0342  data_time: 0.0005  memory: 327  
2023/07/24 15:02:40 - mmengine - INFO - Evaluating bbox...
2023/07/24 15:03:39 - mmengine - INFO - bbox_mAP_copypaste: 0.204 0.320 0.215 0.064 0.190 0.365
2023/07/24 15:03:40 - mmengine - INFO - Epoch(test) [5000/5000]    coco/bbox_mAP: 0.2040  coco/bbox_mAP_50: 0.3200  coco/bbox_mAP_75: 0.2150  coco/bbox_mAP_s: 0.0640  coco/bbox_mAP_m: 0.1900  coco/bbox_mAP_l: 0.3650  data_time: 0.0010  time: 0.0352
